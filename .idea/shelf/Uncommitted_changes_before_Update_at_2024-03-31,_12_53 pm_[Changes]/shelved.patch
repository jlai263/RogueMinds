Index: src/main/GamePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main;\n\nimport GameStart.Main;\nimport data.SaveLoad;\nimport entities.Player;\nimport object.SuperObject;\nimport tile.TileManager;\nimport GameStart.DebugMenu;\nimport GameStart.SoundManager;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\n/**\n * The main game panel, responsible for initializing and running the game loop, rendering game elements, and managing game state.\n * <p>\n * This class sets up the game window, initializes game objects, and handles the main game loop and rendering. It includes settings for\n * tile size, screen dimensions, and world dimensions, as well as references to key game components like the player, tiles, objects, and UI elements.\n * \n * @author Gurshaan Gill\n * @version 1.2\n * @since 1.0\n */\npublic class GamePanel extends JPanel implements Runnable{\n\n    // Creating Screen Settings\n    public final int originalTileSize = 16; // 16 x 16 tile pixel\n    public final int scale = 3; // tile multiplier\n    public final int tileSize = originalTileSize * scale;// 48 x 48 pixel size\n    public final int screenCols = 16;\n    public final int screenRows = 12;\n\n    public final int screenWidth = tileSize * screenCols; // Horizontal Length = 768 pixels\n    public final int screenHeight = tileSize * screenRows; // Vertical Length = 576 pixels\n    // Resolution = 768 x 576 //\n\n    // World Settings\n    public final int maxWorldCol = 50;\n    public final int maxWorldRow = 50;\n\n    // Full Screen\n    int screenWidth2 = screenWidth;\n    int screenHeight2 = screenHeight;\n    BufferedImage tempScreen;\n    Graphics2D g2;\n\n    final int FPS = 60;\n\n    KeyHandler keyH = new KeyHandler(this);\n\n\n    Sound music = new Sound();\n    Sound se = new Sound();\n    Thread gameThread; //Sets the Frames (fps)\n    public CollisionChecker cChecker = new CollisionChecker(this);\n    public ObjSetter oSetter = new ObjSetter(this);\n    public UI ui = new UI(this);\n    public Player player = new Player(this, keyH);\n    TileManager tileM = new TileManager(this);\n    public SuperObject obj[] = new SuperObject[20];\n    public SaveLoad saveLoad = new SaveLoad(this);\n\n    // Pause Feature\n    public int gameState = 1;\n    public final int playState = 1;\n    public final int pauseState = 2;\n\n    public DebugMenu debugMenu;\n    private SoundManager soundManager;\n   /**\n     * Constructor for initializing the game panel.\n     */\n    public GamePanel(){\n\n        boolean[][] volumeStates = new boolean[3][10]; // Example size, adjust according to your needs\n        for (int i = 0; i < volumeStates.length; i++) {\n            for (int j = 0; j < volumeStates[i].length; j++) {\n                volumeStates[i][j] = true; // Set initial volume state, adjust as necessary\n            }\n        }\n        soundManager = new SoundManager(volumeStates);\n        this.setPreferredSize(new Dimension(screenWidth, screenHeight));\n        this.setBackground(Color.black);\n        this.setDoubleBuffered(true); // Sets true for offscreen painting buffers, improves distance rendering\n        this.addKeyListener(keyH);\n        this.setFocusable(true); // Panel to focus on keyboard inputs\n        debugMenu = new DebugMenu(soundManager, this);\n    }\n    /**\n     * Initializes game objects and starts background music.\n     */\n    public void setGameObj(){\n        oSetter.setObject();\n        playMusic(0);\n\n        //setFullScreen();\n    }\n\n    public void setFullScreen(){\n        // Get Local Screen Size\n        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n        GraphicsDevice gd = ge.getDefaultScreenDevice();\n        gd.setFullScreenWindow(MathRogueQuest.window);\n\n        // Full screen Width and Height\n        screenWidth2 = MathRogueQuest.window.getWidth();\n        screenHeight2 = MathRogueQuest.window.getHeight();\n    }\n\n\n\n    /**\n     * Starts the game thread, kicking off the game loop.\n     */\n    public void startGameThread(){\n        gameThread = new Thread(this);\n        gameThread.start();\n    }\n\n\n    public void run() {\n\n        double drawInterval = 1000000000/FPS;\n        // Calculation:\n        // 1 interval in 0.016 seconds, i.e. 60 intervals in 1 second\n        // so in a second 60 intervals(frames), FPS = 60;\n        double nextDrawTime = System.nanoTime() + drawInterval; //current time + 0.016 second interval\n\n        while(gameThread != null){\n\n            long currentTime= System.nanoTime();\n            //Update the character position on each key (character movement)\n            update();\n            //Draw the screen again with the updated information\n            repaint();\n\n\n\n            try {\n                double remainingTime = nextDrawTime - System.nanoTime(); // Time elapsed while running a single game thread\n                remainingTime = remainingTime/1000000; //Converting remaining time to milliseconds\n                if (remainingTime < 0) remainingTime = 0; //catching for system errors for bugs in the time loop\n                Thread.sleep((long) remainingTime); //Sleep creates the illusion of frames and motion\n\n                nextDrawTime += drawInterval;\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    /**\n     * Updates the state of game entities.\n     */\n    protected void update(){\n        if ( gameState == playState) {\n            player.update();\n        }\n        if (gameState == pauseState){\n\n        }\n    }\n\n    /**\n     * This method is called by Swing during the repaint process and is responsible for drawing all visible game elements.\n     * It utilizes Graphics2D for rendering, offering enhanced control over graphics operations. The method\n     * iterates through all game objects and the player, invoking their respective draw methods. It ensures that the\n     * UI is drawn last so that it overlays other game elements.\n     *\n     * @param g the Graphics object to project\n     */\n    protected void paintComponent(Graphics g) {\n        super.paintComponent(g);\n\n        Graphics2D g2 = (Graphics2D) g;\n        //Tile\n        tileM.draw(g2);\n        //Objects\n        for (int i = 0; i < obj.length; i++){\n            if(obj[i] != null) obj[i].draw(g2, this);\n        }\n        //Player\n        player.draw(g2);\n\n        //UI\n        ui.draw(g2);\n\n        g2.dispose(); // Clear cache and saves memory\n    }\n  \n    /**\n     * Plays background music based on the specified track index.\n     * \n     * @param i The index of the music track to play.\n     */\n  \n    public void playMusic (int i){\n        music.setFile(i);\n        music.play();\n        music.loop();\n    }\n  \n    /**\n     * Stops the currently playing music.\n     */\n  \n    public  void stopMusic(){music.stop();}\n  \n      /**\n     * Plays a sound effect based on the specified sound effect index.\n     * \n     * @param i The index of the sound effect to play.\n     */\n  \n    public void playSE(int i){\n        se.setFile(i);\n        se.play();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/GamePanel.java b/src/main/GamePanel.java
--- a/src/main/GamePanel.java	(revision 8fea855a1904c0bc9fe47480e642aede85909b8a)
+++ b/src/main/GamePanel.java	(date 1711847594901)
@@ -43,11 +43,13 @@
     int screenHeight2 = screenHeight;
     BufferedImage tempScreen;
     Graphics2D g2;
+    private SoundManager soundManager;
+
 
     final int FPS = 60;
 
     KeyHandler keyH = new KeyHandler(this);
-
+    DebugMenu debugMenu = new DebugMenu(soundManager, this);
 
     Sound music = new Sound();
     Sound se = new Sound();
@@ -55,7 +57,7 @@
     public CollisionChecker cChecker = new CollisionChecker(this);
     public ObjSetter oSetter = new ObjSetter(this);
     public UI ui = new UI(this);
-    public Player player = new Player(this, keyH);
+    public Player player = new Player(this, keyH, debugMenu);
     TileManager tileM = new TileManager(this);
     public SuperObject obj[] = new SuperObject[20];
     public SaveLoad saveLoad = new SaveLoad(this);
@@ -65,8 +67,8 @@
     public final int playState = 1;
     public final int pauseState = 2;
 
-    public DebugMenu debugMenu;
-    private SoundManager soundManager;
+
+
    /**
      * Constructor for initializing the game panel.
      */
@@ -84,7 +86,8 @@
         this.setDoubleBuffered(true); // Sets true for offscreen painting buffers, improves distance rendering
         this.addKeyListener(keyH);
         this.setFocusable(true); // Panel to focus on keyboard inputs
-        debugMenu = new DebugMenu(soundManager, this);
+
+        System.out.println(debugMenu.infiniteCoinsOn+"aaaa");
     }
     /**
      * Initializes game objects and starts background music.
Index: src/GameStart/DebugMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GameStart;\n\nimport main.GamePanel;\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class DebugMenu {\n    private ImageIcon debugMenuIcon;\n    private ImageIcon backButtonIcon;\n    private SoundManager soundManager;\n    private GamePanel gamePanel;\n\n    // Define squares positions and sizes\n    private final int squareWidth = 45;\n    private final int squareHeight = 45;\n    private final int squareX = 530; // Adjust these positions as needed\n    private final int squareY1 = 295; // Y position for the first square\n    private final int squareY2 = squareY1 + squareHeight + 43; // Y position for the second square, with some spacing\n\n    // State tracking for features\n    private boolean infiniteCoinsOn = false;\n    private boolean hyperspeedOn = false;\n\n    public DebugMenu(SoundManager soundManager, GamePanel gamePanel) {\n        this.soundManager = soundManager;\n        this.gamePanel = gamePanel;\n        // Load the icons\n        debugMenuIcon = new ImageIcon(getClass().getResource(\"/loginUi/debugMenu.png\"));\n        ImageIcon backIcon = new ImageIcon(getClass().getResource(\"/loginUi/backButton.png\"));\n        Image backButton = backIcon.getImage().getScaledInstance((int) (backIcon.getIconWidth() * 0.30), (int) (backIcon.getIconHeight() * 0.75), Image.SCALE_SMOOTH);\n        backButtonIcon = new ImageIcon(backButton);\n    }\n\n    public void draw(Graphics g, Component component) {\n        // Draw the background and back button\n        debugMenuIcon.paintIcon(component, g, 0, 0);\n        backButtonIcon.paintIcon(component, g, 650, 125);\n\n        // Draw two squares based on their state\n        g.setColor(Color.WHITE);\n        if (infiniteCoinsOn) {\n            g.fillRect(squareX, squareY1, squareWidth, squareHeight); // Filled for \"Infinite Coins\" activated\n        } else {\n            g.drawRect(squareX, squareY1, squareWidth, squareHeight); // Empty for \"Infinite Coins\" deactivated\n        }\n        if (hyperspeedOn) {\n            g.fillRect(squareX, squareY2, squareWidth, squareHeight); // Filled for \"Hyperspeed\" activated\n        } else {\n            g.drawRect(squareX, squareY2, squareWidth, squareHeight); // Empty for \"Hyperspeed\" deactivated\n        }\n    }\n\n    public void handleClick(int x, int y, Component component) {\n        // Check and toggle for the first square (Infinite Coins)\n        if (x >= squareX && x <= squareX + squareWidth && y >= squareY1 && y <= squareY1 + squareHeight) {\n            infiniteCoinsOn = !infiniteCoinsOn;\n            soundManager.playSound(\"/sound/selectSF.wav\"); // Play sound here\n            if (infiniteCoinsOn) {\n                gamePanel.player.hasCoin = 99;\n                System.out.println(gamePanel.player.hasCoin);\n            } else {\n                gamePanel.player.hasCoin = 0; // Reset to default when toggling off\n            }\n            System.out.println(\"Infinite Coins: \" + (infiniteCoinsOn ? \"Activated\" : \"Deactivated\"));\n            component.repaint(); // Refresh the UI to reflect the change\n        }\n        // Check and toggle for the second square (Hyperspeed)\n        else if (x >= squareX && x <= squareX + squareWidth && y >= squareY2 && y <= squareY2 + squareHeight) {\n            hyperspeedOn = !hyperspeedOn;\n            soundManager.playSound(\"/sound/selectSF.wav\"); // Play sound here\n            // Here you can add the logic for toggling hyperspeed in the player.\n            System.out.println(\"Hyperspeed: \" + (hyperspeedOn ? \"Activated\" : \"Deactivated\"));\n            component.repaint(); // Refresh the UI to reflect the change\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GameStart/DebugMenu.java b/src/GameStart/DebugMenu.java
--- a/src/GameStart/DebugMenu.java	(revision 8fea855a1904c0bc9fe47480e642aede85909b8a)
+++ b/src/GameStart/DebugMenu.java	(date 1711847594905)
@@ -18,8 +18,8 @@
     private final int squareY2 = squareY1 + squareHeight + 43; // Y position for the second square, with some spacing
 
     // State tracking for features
-    private boolean infiniteCoinsOn = false;
-    private boolean hyperspeedOn = false;
+    public boolean infiniteCoinsOn = false;
+    public boolean hyperspeedOn = false;
 
     public DebugMenu(SoundManager soundManager, GamePanel gamePanel) {
         this.soundManager = soundManager;
Index: src/mathSolving/MathProblemGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mathSolving;\nimport javax.swing.*;\nimport javax.swing.text.*;\nimport entities.Player;\nimport java.awt.*;\nimport java.awt.event.*;\nimport main.UI;\n\n/**\n * A JFrame class that generates math problems for the player to solve.\n * The problems are displayed in a window with an input field for the answer and a submit button.\n * If the answer is correct, the player gains a coin. Otherwise, the correct answer is displayed.\n * @author Justin Lai\n * @version 1.0\n * @since 1.0\n */\n\n\npublic class MathProblemGenerator extends JFrame {\n    private JLabel questionLabel;\n    private JTextField answerField;\n    private JButton submitButton;\n    private JLabel correctCountLabel; // Label to display correct answers count\n    private int num1, num2, answer;\n    private int correctAnswersCount; // Counter for correct answers\n    /**\n     * Constructs a MathProblemGenerator object.\n     * Initializes the JFrame properties, sets the layout, and creates the components.\n     * Also generates the first math problem.\n     */\n    public MathProblemGenerator() {\n        setTitle(\"Answer the Questions!\");\n        setSize(300, 200); // Increased height to accommodate the correct count label\n        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n        setLayout(null);\n        getContentPane().setBackground(Color.DARK_GRAY);\n\n        questionLabel = new JLabel();\n        questionLabel.setForeground(Color.WHITE);\n        questionLabel.setBounds(20, 20, 250, 20);\n        add(questionLabel);\n\n        answerField = new JTextField();\n        answerField.setBackground(Color.LIGHT_GRAY);\n        answerField.setBounds(20, 70, 100, 20);\n        ((AbstractDocument) answerField.getDocument()).setDocumentFilter(new DocumentFilter() {\n            @Override\n            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {\n                String newText = fb.getDocument().getText(0, fb.getDocument().getLength()) + text;\n                if (newText.matches(\"\\\\d*\")) {\n                    super.replace(fb, offset, length, text, attrs);\n                }\n            }\n        });\n        add(answerField);\n\n        submitButton = new JButton(\"Submit\");\n        submitButton.setBackground(Color.GRAY);\n        submitButton.setForeground(Color.WHITE);\n        submitButton.setBounds(130, 70, 80, 20);\n        add(submitButton);\n\n        submitButton.addActionListener(new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n                checkAnswer();\n            }\n        });\n\n        correctCountLabel = new JLabel(\"You have answered: \" + correctAnswersCount + \"/3 questions correctly\"); // Initialize correct count label\n        correctCountLabel.setForeground(Color.WHITE);\n        correctCountLabel.setBounds(20, 100, 250, 20);\n        add(correctCountLabel);\n\n        createQuestion();\n\n        setLocationRelativeTo(null);\n    }\n    /**\n     * Generates a new math problem.\n     * Randomly selects addition or subtraction and two numbers between 0 and 20.\n     * Displays the problem in the question label.\n     */\n    public void createQuestion() {\n        num1 = (int) (Math.random() * 21);\n        num2 = (int) (Math.random() * 21);\n\n        if (num1 < num2) {\n            int temp = num1;\n            num1 = num2;\n            num2 = temp;\n        }\n\n        if (Math.random() < 0.5) {\n            answer = num1 + num2;\n            questionLabel.setText(num1 + \" + \" + num2 + \" = ?\");\n        } else {\n            answer = num1 - num2;\n            questionLabel.setText(num1 + \" - \" + num2 + \" = ?\");\n        }\n\n        answerField.setText(\"\");\n    }\n    /**\n     * Checks the user's answer and provides feedback.\n     * If the answer is correct, the player gains a coin.\n     * If the answer is incorrect, the correct answer is displayed.\n     */\n    public void checkAnswer() {\n        try {\n            int userAnswer = Integer.parseInt(answerField.getText());\n            if (userAnswer == answer) {\n                JOptionPane.showMessageDialog(this, \"Correct!\", \"Result\", JOptionPane.INFORMATION_MESSAGE);\n                correctAnswersCount++; // Increment correct answers count\n                \n                Player.answeringQuestion = true;\n                updateCorrectCountLabel(); // Update correct count label\n                if (correctAnswersCount == 3) { // Check if 3 correct answers have been reached\n                    Player.hasCoin++;\n                    Player.answeringQuestion = false;\n                \tdispose(); // Close the window if 3 correct answers are reached\n\n                } else {\n                    createQuestion(); // Generate new question\n                    answerField.setText(\"\"); // Clear answer field\n                }\n     \n            } else {\n                JOptionPane.showMessageDialog(this, \"Incorrect! The correct answer is \" + answer, \"Result\", JOptionPane.ERROR_MESSAGE);\n                UI.lives--;\n                if(UI.lives==0) {\n                \tPlayer.answeringQuestion = false;\n                \tSystem.out.print(\"hi\");\n                \tdispose(); \n                }\n                else {\n                    \n                    System.out.println(UI.lives);\n                    answerField.setText(\"\");\n                    createQuestion();\n                }\n\n            }\n        } catch (NumberFormatException ex) {\n            JOptionPane.showMessageDialog(this, \"Please enter a valid number.\", \"Error\", JOptionPane.ERROR_MESSAGE);\n        }\n    }\n    /**\n     * Updates the correct count label to display the number of correct answers out of 3.\n     */\n    public void updateCorrectCountLabel() {\n        correctCountLabel.setText(\"You have answered: \" + correctAnswersCount + \"/3 questions correctly\"); // Update correct count label\n    }\n\n    public static void main(String[] args) {\n    \t//Run the 2 commands below to start the math questions\n        MathProblemGenerator mathProblemGenerator = new MathProblemGenerator();\n        mathProblemGenerator.setVisible(true);\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/mathSolving/MathProblemGenerator.java b/src/mathSolving/MathProblemGenerator.java
--- a/src/mathSolving/MathProblemGenerator.java	(revision 8fea855a1904c0bc9fe47480e642aede85909b8a)
+++ b/src/mathSolving/MathProblemGenerator.java	(date 1711848240803)
@@ -56,7 +56,7 @@
 
         submitButton = new JButton("Submit");
         submitButton.setBackground(Color.GRAY);
-        submitButton.setForeground(Color.WHITE);
+        submitButton.setForeground(Color.BLACK);
         submitButton.setBounds(130, 70, 80, 20);
         add(submitButton);
 
Index: src/entities/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package entities;\n\nimport main.GamePanel;\nimport main.KeyHandler;\nimport mathSolving.MathProblemGenerator;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\n\n/**\n * @author      Gurshaan Gill \n * @version     1.2\n * @since       1.0 \n * Represents the player character in the game, extending the generic Entity class with additional features.\n * <p>\n * This class manages the player's movements, animations, interactions with objects in the game world, and collision detection.\n * It initializes the player's starting position, loads the player's sprite images, and updates the player's state in each game loop iteration.\n */\n\npublic class Player extends Entity{\n    // Reference to the GamePanel for accessing game settings and utilities\n    GamePanel gp;\n    \n    // Reference to the KeyHandler for processing keyboard input\n  \tKeyHandler keyH;\n  \n    // Screen position for drawing the player sprite\n    public final int screenX;\n    public final int screenY;\n  \n  \t// Tracks the number of coins the player has collected\n    public static int hasCoin = 0;\n    public double time;\n    public String username;\n  \n\tpublic static boolean answeringQuestion = false;\n\n    /**\n     * Constructs a Player with references to the game panel and key handler.\n     * Initializes the player's position, solid area for collision, and loads the sprite images.\n     *\n     * @param gp   Reference to the GamePanel for accessing game settings and utilities.\n     * @param keyH Reference to the KeyHandler for processing keyboard input.\n     */\n    public Player(GamePanel gp, KeyHandler keyH){\n        this.gp = gp;\n        this.keyH = keyH;\n        screenX = gp.screenWidth/2 - (gp.tileSize/2);\n        screenY = gp.screenHeight/2 - (gp.tileSize/2);\n\n        solidArea = new Rectangle();\n        solidArea.x = 8;\n        solidArea.y = 16;\n        solidAreaDefaultX = solidArea.x;\n        solidAreaDefaultY = solidArea.y;\n        solidArea.width = 28;\n        solidArea.height = 28;\n\n        setDefaultValues();\n        getPlayerImage();\n    }\n  \n    /**\n     * Sets the player's default values including the starting position and movement speed.\n     */\n  \n    public void setDefaultValues(){\n        System.out.println(hasCoin);\n        worldX = gp.tileSize * 23;\n        worldY = gp.tileSize * 21;\n        speed = 4;\n        direction = \"down\";\n    }\n\n      /**\n     * Loads the player's sprite images from the resources directory.\n     */\n    public void getPlayerImage(){\n\n        try {\n            up1 = ImageIO.read(getClass().getResourceAsStream(\"/player/up1.png\"));\n            up2 = ImageIO.read(getClass().getResourceAsStream(\"/player/up2.png\"));\n            down1 = ImageIO.read(getClass().getResourceAsStream(\"/player/d1.png\"));\n            down2 = ImageIO.read(getClass().getResourceAsStream(\"/player/d2.png\"));\n            left1 = ImageIO.read(getClass().getResourceAsStream(\"/player/l1.png\"));\n            left2 = ImageIO.read(getClass().getResourceAsStream(\"/player/l2.png\"));\n            right1 = ImageIO.read(getClass().getResourceAsStream(\"/player/r1.png\"));\n            right2 = ImageIO.read(getClass().getResourceAsStream(\"/player/r2.png\"));\n        }\n        catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n\n      /**\n     * Updates the player's state in each game loop iteration.\n     * Handles player movement based on keyboard input and manages collision detection and sprite animation.\n     */\n    public void update(){\n       \n    \tif (answeringQuestion == false) { //ADD TO BITBUCKET\n\t    \tif ((keyH.upPressed == true || keyH.downPressed == true ||\n\t            keyH.leftPressed == true || keyH.rightPressed) == true){\n\t\n\t            if (keyH.upPressed == true){\n\t                direction = \"up\";\n\t\n\t            }\n\t            else if (keyH.downPressed == true){\n\t                direction = \"down\";\n\t\n\t            }\n\t            else if( keyH.leftPressed == true){\n\t                direction = \"left\";\n\t\n\t            }\n\t            else if (keyH.rightPressed == true){\n\t                direction = \"right\";\n\t\n\t            }\n\t      \n\t\n\t            // Checking Tile Collision\n\t            collisionOn = false;\n\t            gp.cChecker.checkTile(this);\n\t\n\t            // Checking Object Collision\n\t            int objIndex = gp.cChecker.checkObject(this, true);\n\t            pickUpObject(objIndex);\n\t\n\t            //If Collision is false\n\t            if(collisionOn == false){\n\t                switch (direction){\n\t                    case \"up\":\n\t                        worldY -= speed;\n\t                        break;\n\t\n\t                    case \"down\":\n\t                        worldY += speed;\n\t                        break;\n\t\n\t                    case \"left\":\n\t                        worldX -= speed;\n\t                        break;\n\t\n\t                    case \"right\":\n\t                        worldX += speed;\n\t                        break;\n\t                }\n\t            }\n\t\n\t            spriteCounter++;\n\t            if (spriteCounter > 10){\n\t                if (spriteNum == 1) spriteNum = 2;\n\t                else if (spriteNum == 2) spriteNum =1;\n\t                spriteCounter = 0;\n\t            }\n\t\n\t        }\n    \t}\n\n    }\n\n    /**\n     * Handles the player's interaction with objects in the game world.\n     * For example, collecting coins or opening doors.\n     *\n     * @param index The index of the object in the game world that the player interacts with.\n     */\n    public void pickUpObject (int index){\n        // If there is object collision\n        if (index != 999){\n            String objectName = gp.obj[index].name;\n\n            switch (objectName){\n                case \"Key\":\n                    gp.playSE(1);\n                    hasCoin++;\n                    gp.obj[index] = null;\n                    gp.ui.showMessage(\"You got a Coin!\");\n                    break;\n\n                case \"Door\":\n                    if (hasCoin > 2){\n                        gp.playSE(3);\n                        gp.obj[index] = null;\n                        hasCoin = hasCoin - 3;\n                        gp.ui.showMessage(\"You opened the Door!\");\n                    }\n                    else gp.ui.showMessage(\"You need 3 Coins to open the Door!\");\n                    break;\n\n                case \"Chest\":\n                    gp.ui.endGame = true;\n                    gp.stopMusic();\n                    gp.playSE(2);\n                    break;\n                case \"enemyOne\":\n                    answeringQuestion = true;\n                    MathProblemGenerator mathProblemGenerator = new MathProblemGenerator();\n                    mathProblemGenerator.setVisible(true);\n                    gp.obj[index] = null;\n                    break;\n                case \"enemyTwo\":\n                    answeringQuestion = true;\n                    MathProblemGenerator mathProblemGenerator2 = new MathProblemGenerator();\n                    mathProblemGenerator2.setVisible(true);\n                    gp.obj[index] = null;\n                    break;\n                case \"enemyThree\":\n                    answeringQuestion = true;\n                    MathProblemGenerator mathProblemGenerator3 = new MathProblemGenerator();\n                    mathProblemGenerator3.setVisible(true);\n                    gp.obj[index] = null;\n                    break;\n                case \"enemyFour\":\n                    answeringQuestion = true;\n                    MathProblemGenerator mathProblemGenerator4 = new MathProblemGenerator();\n                    mathProblemGenerator4.setVisible(true);\n                    gp.obj[index] = null;\n                    break;\n            }\n        }\n    }\n  \n    /**\n     * Draws the player sprite on the game panel.\n     * The sprite image is selected based on the player's direction and animation state.\n     *\n     * @param g2 Graphics2D object used for drawing the player sprite.\n     */\n  \n    public void draw(Graphics2D g2){\n        // white rect eg\n        //g2.setColor(Color.white);\n        //g2.fillRect(x, y, gp.tileSize, gp.tileSize);\n\n        BufferedImage image = null;\n\n        switch (direction){\n            case(\"up\"):\n                if (spriteNum == 1) image = up1;\n                if (spriteNum == 2) image = up2;\n                break;\n\n            case(\"down\"):\n                if (spriteNum == 1) image = down1;\n                if (spriteNum == 2) image = down2;\n                break;\n\n            case (\"left\"):\n                if (spriteNum == 1) image = left1;\n                if (spriteNum == 2) image = left2;\n                break;\n\n            case(\"right\"):\n                if (spriteNum == 1) image = right1;\n                if (spriteNum == 2) image = right2;\n                break;\n        }\n        g2.drawImage(image, screenX, screenY, gp.tileSize, gp.tileSize, null);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/entities/Player.java b/src/entities/Player.java
--- a/src/entities/Player.java	(revision 8fea855a1904c0bc9fe47480e642aede85909b8a)
+++ b/src/entities/Player.java	(date 1711848695760)
@@ -1,5 +1,6 @@
 package entities;
 
+import GameStart.DebugMenu;
 import main.GamePanel;
 import main.KeyHandler;
 import mathSolving.MathProblemGenerator;
@@ -25,10 +26,12 @@
     
     // Reference to the KeyHandler for processing keyboard input
   	KeyHandler keyH;
+    DebugMenu debug;
   
     // Screen position for drawing the player sprite
     public final int screenX;
     public final int screenY;
+    public boolean infiniteCoins;
   
   	// Tracks the number of coins the player has collected
     public static int hasCoin = 0;
@@ -44,9 +47,10 @@
      * @param gp   Reference to the GamePanel for accessing game settings and utilities.
      * @param keyH Reference to the KeyHandler for processing keyboard input.
      */
-    public Player(GamePanel gp, KeyHandler keyH){
+    public Player(GamePanel gp, KeyHandler keyH, DebugMenu debug){
         this.gp = gp;
         this.keyH = keyH;
+        this.debug = debug;
         screenX = gp.screenWidth/2 - (gp.tileSize/2);
         screenY = gp.screenHeight/2 - (gp.tileSize/2);
 
@@ -58,6 +62,8 @@
         solidArea.width = 28;
         solidArea.height = 28;
 
+        System.out.println(debug.infiniteCoinsOn+"wbvnio3rwbev");
+
         setDefaultValues();
         getPlayerImage();
     }
